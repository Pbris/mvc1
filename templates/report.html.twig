{% extends "base.html.twig" %}

{% block title %}About{% endblock %}

{% block body %}
        <h4>Innehållsförteckning</h4>
        <ul>
            <li><a href="#kmom01">kmom01</a></li>
            <li><a href="#kmom02">kmom02</a></li>
            <li><a href="#kmom03">kmom03</a></li>
            <li><a href="#kmom04">kmom04</a></li>
            <li><a href="#kmom05">kmom05</a></li>
            <li><a href="#kmom06">kmom06</a></li>
            <li><a href="#kmom10">kmom10</a></li>
        </ul>

    <h2>Redovisning</h2>

    <h3 id="kmom01">kmom01</h3>

    <p>
    De kunskaper och tidigare erfarenheter jag har från objektorientering är främst ifrån den kurs i objektorienterad python jag nyss genomgått. Där upplever jag att jag fått en god grund att stå på, och känner mig någorlunda bekväm i begrepp som klasser, klassdiagram, arv, etc, vilka vi delvis använt i kmom01 och som jag anar kommer att återkomma mer senare i denna kurs. Även om jag troligen kommer behöva repetera vissa delar känns det lovande att ha förstått grunderna i objektorientering i stort tidigare.
    <br><br>
    I skapandet av de första klasserna i PHP behövs förståelse för begrepp som objekt, metoder, egenskaper och instansering. För att definiera strukturen behöver man använda ”class” innan sitt namn för klassen.
    <br><br>
    Kodbasen och strukturen som används för me/report har främst sitt ursprung i ramverket Symfony. Jag upplevde strukturen som relativt överskådlig och lättarbetad, även om det snabbt blev flera mappar och filer att ha i sitt medvetande. Vilket dock är förståeligt då funktionen snabbt också blev hög.
    <br><br>
    Angående artikeln “PHP The Right Way”, så är det intressant att PHP har utvecklats de senare decennierna till att också stödja objektorienterad programmering, från att tidigare ha varit ett mer proceduralt språk som jag uppfattar det. Hur dessa paradigmer ändras finner jag intressant. Det tycks positivt för framtiden att språket har lyckats göra en sådan förändring för att fortsätta vara aktuellt.
    <br>
    Även kodstil är intressant, och att man t ex kan använda ”Codesniffer” för att utvärdera sin kod. Då vi inte använder ”dbwebb validate” i denna kurs blir det intressant att se hur detta löses framledes.
    <br><br>
    Min TIL för kursmomentet är troligen en förstärkt insikt om hur många likheter flera programmeringsspråk har, i detta fall objektorientering i python och PHP. Även om det såklart behöver uttryckas på olika sätt så är grundtankarna desamma, och användbara när man väl lärt sig dem även i andra språk. Denna insikt, att mycket lärdomar också är översättbara, har givit ytterligare glädje i lärandet.

    </p>


    <h3 id="kmom02">kmom02</h3>

    <p>
    </p>


    <h3 id="kmom03">kmom03</h3>

    <p>
    </p>


    <h3 id="kmom04">kmom04</h3>

    <p>
    </p>


    <h3 id="kmom05">kmom05</h3>

    <p>
    </p>


    <h3 id="kmom06">kmom06</h3>



    <h3 id="kmom10">kmom10</h3>

    <p>Här kommer redovisningstexten för detta kursmoment.</p>

{% endblock %}