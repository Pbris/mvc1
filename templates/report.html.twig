{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
        <h4>Innehållsförteckning</h4>
        <ul>
            <li><a href="#kmom01">kmom01</a></li>
            <li><a href="#kmom02">kmom02</a></li>
            <li><a href="#kmom03">kmom03</a></li>
            <li><a href="#kmom04">kmom04</a></li>
            <li><a href="#kmom05">kmom05</a></li>
            <li><a href="#kmom06">kmom06</a></li>
            <li><a href="#kmom10">kmom10</a></li>
        </ul>

    <h2>Redovisning</h2>

    <h3 id="kmom01">kmom01</h3>

    <p>
    De kunskaper och tidigare erfarenheter jag har från objektorientering är främst ifrån den kurs i objektorienterad python jag nyss genomgått. Där upplever jag att jag fått en god grund att stå på, och känner mig någorlunda bekväm i begrepp som klasser, klassdiagram, arv, etc, vilka vi delvis använt i kmom01 och som jag anar kommer att återkomma mer senare i denna kurs. Även om jag troligen kommer behöva repetera vissa delar känns det lovande att ha förstått grunderna i objektorientering i stort tidigare.
    <br><br>
    I skapandet av de första klasserna i PHP behövs förståelse för begrepp som objekt, metoder, egenskaper och instansering. För att definiera strukturen behöver man använda ”class” innan sitt namn för klassen.
    <br><br>
    Kodbasen och strukturen som används för me/report har främst sitt ursprung i ramverket Symfony. Jag upplevde strukturen som relativt överskådlig och lättarbetad, även om det snabbt blev flera mappar och filer att ha i sitt medvetande. Vilket dock är förståeligt då funktionen snabbt också blev hög.
    <br><br>
    Angående artikeln “PHP The Right Way”, så är det intressant att PHP har utvecklats de senare decennierna till att också stödja objektorienterad programmering, från att tidigare ha varit ett mer proceduralt språk som jag uppfattar det. Hur dessa paradigmer ändras finner jag intressant. Det tycks positivt för framtiden att språket har lyckats göra en sådan förändring för att fortsätta vara aktuellt.
    <br>
    Även kodstil är intressant, och att man t ex kan använda ”Codesniffer” för att utvärdera sin kod. Då vi inte använder ”dbwebb validate” i denna kurs blir det intressant att se hur detta löses framledes.
    <br><br>
    Min TIL för kursmomentet är troligen en förstärkt insikt om hur många likheter flera programmeringsspråk har, i detta fall objektorientering i python och PHP. Även om det såklart behöver uttryckas på olika sätt så är grundtankarna desamma, och användbara när man väl lärt sig dem även i andra språk. Denna insikt, att mycket lärdomar också är översättbara, har givit ytterligare glädje i lärandet.

    </p>


    <h3 id="kmom02">kmom02</h3>

    <p>
    Arv, komposition, interface och trait är alla konstruktioner som används för att strukturera kod i PHP objektorienterat.
    <br>Arv används för att låta en klass ärva metoder och egenskaper från en annan. 
    <br>Komposition innebär att en klass använder instanser från andra, ofta mindre, klasser. Något som gör koden mer flexibel då man kan ändra mindre delar utan att förändra hela strukturen.
    <br>Interface innebär att en klass har en uppsättning metoder som denna måste erbjuda, som en form av kontrakt.
    <br>Trait tillåter återanvändning av kod, och är särskilt lämpad för att sätta ihop funktionalitet som t ex inte passar som arv.
    <br><br>Angående min implementation så började jag uppgiften med att arbeta med sessionen, och skapa en landningssida för denna som både skrev ut vad denna innehåller, och också erbjöd möjlighet att radera denna. Som nämndes i uppgiftsbeskrivning var detta ett värdefullt verktyg i de senare implementationerna av uppgiften.
    <br><br>De klasser jag tyckte var lämpliga och skapade var Card, Deck och CardGraphic, vilka jag beskrev och gjorde UML-diagram för i min landingssida ”Card game”. Jag skapade en ny kontroller för mitt Card game, och kunde implementera routes som använde sig av klasserna för min kortspelsgrund. I detta hade jag användning av övningarna och även tidigare kursers objektorienterade moment för att tänka teoretiskt kring implementationen.
    <br><br>Jag är överlag nöjd med min implementation. Då jag valde att inte avsätta tid för att använda mig av bilder för korten är detta ett utvecklingsområde, och något jag istället sköt på till framtida kursmoment. Jag kommer få sätta mig in i detta längre fram kände jag dock, och det kändes roligt att även för använda sig av lite mer klassiska UTF-tecken.
    <br><br>Efter arbete med Symfony och applikationskod hittills känner jag att jag har fått en större insikt om vidden av möjligheter PHP har att erbjuda. Något jag inte riktigt var medveten om, då jag efter främst Webtec-kursen fick upplevelsen av att språket var något mer begränsat och eventuellt förlegat jämfört med t ex JavaScript och Python. Vilket definitivt känns glädjande.

    <br><br>Min TIL för kursmomentet är troligen användandet av arv i PHP, och att detta var något relativt enkelt och definitivt användbart även i detta språk. Även introduktionen till de för mig nyare begreppen trait och interface var intressant att få glänta på dörren till, och är något jag ser fram emot att implementera mer i kommande kursmoment. 

    </p>


    <h3 id="kmom03">kmom03</h3>

    <p>
    Mitt arbete med att modellera ett kortspel med flödesdiagram och pseudokod var intressant och ett någorlunda nytt sätt att ta sig an en uppgift för mig. Även om det initialt kändes lite tidskrävande så upplevde jag att ens bild av helheten etablerades tydligare. Något jag sedan märkte sparade tid för mig i mitt arbete, då det var tydligare för mig vad den större planen var i varje mindre steg. För att kunna lägga upp en hållbar plan var jag också tvungen att läsa in mig något mer på objektorienterad PHP, vilket jag är tacksam för i efterhand. 
    <br><br>Jag är relativt nöjd med min lösning av uppgiften. Det som främst kunde lagts mer tid på är en tilltalande design, men spelet fungerar som tänkt och jag upplever att det åtminstone väcker lite lust att spela ett par vändor. Vilket är ett glädjande resultat. Jag tycker min kod och mina klasser blev relativt minimalistiska och tydliga för en utomstående, med smalare Controller och tjockare Model. Min template ”result” innehöll lite beräkningsfunktionalitet, och ett förbättringsområde hade kunnat vara att även lägga denna i en modell.
    <br><br>Jag känner återigen att PHP i ramverket Symfony är mer tilltalande än jag kanske trott sedan tidigare, och är glad över att upptäcka fler fördelar med PHP och detta ramverk ju mer tiden går. Både MVC-strukturen och den grundläggande strukturen i Symfony med src/, templates/, /config, etc, börjar i högre grad sätta sig och bli mer förståelig. Jag förstår grundtanken bakom strukturen mer och mer och känner att den numera är tydlig att arbeta i. Detta från att initialt ha känts något plottrig. Detta är dock ett mönster jag känner igen från tidigare kurser för egen del, och jag är glad att jag återigen känner att jag börjar greppa ett nytt område inom webbprogrammering.
    <br><br>Min TIL är att det var intressant att få utökad egen inblick i kodlinters, som vi tidigare mest använt genom dbwebb validate, i och med av installationen av phpstan och phpmd. Det känns positivt att ha lite mer egen förståelse för sådana verktyg, och också att nu ha möjlighet att använda dessa på egen hand för att även ”objektivt sett” få en godtagbart snygg kod.
    </p>


    <h3 id="kmom04">kmom04</h3>

    <p>
    Att skriva testkod och använda PHPUnit för att köra denna var något som var relativt bekant för mig efter att ha gjort liknande i ”oopython”-kursen. Jag uppskattar det överlag och tycker det är något som forcerar en att skapa en djupare förståelse för både potentiella fel i ens kod och ens kod i stort.
    <br><br>Användandet av PHPUnit var relativt intuitivt och övningarna för att komma igång hjälpte en bra i detta.
    <br><br>Förutom min spel-model valde jag även att skriva tester för mina kort och kortleksmodeller. Jag fick 92 % kodtäckning i min Card-mapp och 82 % i min Game-mapp. För att testa min spel-model ytterligare hade jag vad jag tror behövt använda mig av än mer mockning än den jag redan gjort, något jag troligen gör längre fram i kursen.
    <br><br>Jag upplevde min egen kod som testbar generellt. Det jag märkte var problematiskt främst var mina namespaces, vilka jag förbättrade i källkoden för att kunna skriva fungerande tester. Detta var en uppskattad upptäckt som jag eventuellt inte gjort annars då mina egna tidigare testkörningar av mitt spel inte upptäckt detta.
    <br><br>Med detta sagt tycker jag absolut testbar kod är något man oftast tycks kunna identifiera som ”snygg och ren kod”. I ovanstående exempel med namespaces blev slutresultatet definitivt en snyggare, renare, och mer intuitiv kod.
    <br><br>Min TIL för kursmomentet är troligen just att i större utsträckning ha testbarhet i medvetandet när man skriver kod framöver. Dels känns det viktigt för att det automatiskt blir ett bra utgångssätt för att undvika onödigt invecklade lösningar, och i längden med detta i medvetandet i större projekt både spara tid i kommande utbyggnationer och skapa en större tydlighet för sig själv och andra i sin kod. Dels blir det också enklare att skriva tester för sin kod, något som känns mer viktigt ju mer avancerad programmerare man blir och om man överhuvudtaget ska kunna arbeta i många större mer seriösa projekt.
    </p>


    <h3 id="kmom05">kmom05</h3>

    <p>
    Övningen för Symfony och Doctrine var givande och gick bra att arbeta igenom. Det var intressant hur man även kunde skriva custom querys i repository, vilket vidgar möjligheterna. 
    <br><br>Jag försökte skapa en minimalisk men intuitiv och användarvänlig applikation när jag byggde upp denna. Designen är enkel och hade arbetats mer med om detta varit ett mer uttalat krav. En förklarande landningssida i /library presenterar alternativen användaren har. Det som inte är uttalat är att användaren kan klicka på titeln (som är en länk) för en bok i boklistan i /book/show, vilket leder denne vidare till webbsidan för en enskild bok med mer detaljer. Där finns även möjlighet att uppdatera eller radera boken. Att denna sida hittas genom länken antog jag att användaren upptäcker vid normal användning, och valde att avstå ytterligare beskrivningar för att hålla det lite mer stilrent.
    <br><br>Jag uppskattade att arbeta med ORM i CRUD. När man nu har viss förståelse för objektorienterad programmering gjorde Doctrine ORM det enkelt att arbeta med åtkomst till data via objekt. Detta tillvägagångssätt upplevdes mindre komplext jämfört med att i större omfattning skriva ut SQL-querys som vi tidigare gjort med t ex PHP PDO.
    <br><br>Jag upplevde det som sagt förenklande att arbeta med ORM i min applikationskod mot databaser. En del i detta var att jag fick en mindre och mer strukturerad, samt återanvändningsbar, kodmängd. Detta gav en större känsla av översikt i mitt arbete. Jag kan dock tänka mig att det vid mer komplexa operationer gentemot databaser kan bli något klurigare för mig som programmerare att använda ORM, t ex pga fler steg att felsöka, men det tycks även då möjligt att göra detta vilket är glädjande. 
    <br><br>Min TIL för kursmomentet är troligen generellt den uppskattade insikten och lärdomarna om att man kan använda ORM-verktyg som Doctrine för att objektorienterat koppla objekt till databaser. Samt hur man med detta kan både minska kodmängd, undvika komplex SQL-kod och få en mer strukturerad och lättunderhållen kod.        
    </p>


    <h3 id="kmom06">kmom06</h3>



    <h3 id="kmom10">kmom10</h3>

    <p>Här kommer redovisningstexten för detta kursmoment.</p>

{% endblock %}